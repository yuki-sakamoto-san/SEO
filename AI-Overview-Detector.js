// Put near top
const AIO_LOCALIZED_LABELS = [
  // en
  /ai overview/i, /overview from ai/i, /generated by ai/i,
  // add other locales if needed:
  /ki-übersicht/i, /résumé par ia/i, /resumen de ia/i, /ai オーバービュー/i
];

// Utility: visible?
async function isVisible(page, el) {
  return await el.evaluate((node) => {
    const s = getComputedStyle(node);
    const rect = node.getBoundingClientRect();
    return s.display !== 'none' && s.visibility !== 'hidden' && rect.width > 0 && rect.height > 0;
  });
}

// Main: robust AIO detection
async function detectAIOverview(page) {
  // --- Signal 1: Network (often hits “genai” endpoints) ---
  let genAiNetworkSeen = false;
  const netListener = (req) => {
    const u = req.url();
    if (
      /genai|searchgenai|unified_qa|/_\/SearchGenAI|\b_batchexecute\b/i.test(u) &&
      /google\./i.test(u)
    ) genAiNetworkSeen = true;
  };
  page.on('request', netListener);

  // Give Google a chance to inject AIO after load
  await page.waitForTimeout(1200);
  await page.evaluate(() => window.scrollTo({ top: 0, behavior: 'instant' }));

  // --- Signal 2: DOM probes (run several times, with late-injection watcher) ---
  async function domProbe() {
    // 2a) Common containers/regions
    const candidates = await page.locator([
      // aria label/role region
      'div[aria-label*="AI Overview" i]',
      'div[role="region"] h2:has-text("AI Overview")',
      // collapsible/expanded modules
      'div[data-ved][data-hveid] div:has-text("AI Overview")',
      // chips/card wrappers frequently used in AIO
      'div.g, div[role="complementary"], div[role="region"], div[data-sokoban-container]'
    ].join(', '));

    // 2b) Text-based (localized) search within visible blocks
    const blocks = await page.locator('div, section, aside, article').elementHandles();
    for (const el of blocks) {
      // strip extra whitespace; cap to avoid huge reads
      const text = (await el.evaluate(n => (n.innerText || '').replace(/\s+/g,' ').trim().slice(0, 2000))).toLowerCase();
      if (!text) continue;
      if (AIO_LOCALIZED_LABELS.some(rx => rx.test(text))) {
        if (await isVisible(page, el)) {
          return { present: true, collapsed: /show more|generate|view more/i.test(text), where: 'text-match' };
        }
      }
    }

    // 2c) Explicit aria/role matches
    const aria = page.locator('div[aria-label*="AI Overview" i], div[role="region"]');
    const count = await aria.count();
    for (let i=0; i<count; i++) {
      const el = aria.nth(i);
      if (await isVisible(page, el)) {
        const t = (await el.innerText()).trim();
        if (AIO_LOCALIZED_LABELS.some(rx => rx.test(t))) {
          return { present: true, collapsed: /show more|generate|view more/i.test(t), where: 'aria' };
        }
      }
    }

    // 2d) Look for typical AIO “sources” section
    const sources = page.locator('a[aria-label*="About this result" i], div:has-text("From the web")');
    if (await sources.count()) {
      return { present: true, collapsed: false, where: 'sources' };
    }

    return { present: false };
  }

  // Initial probe
  let result = await domProbe();
  if (result.present) {
    page.off('request', netListener);
    return { aiOverview: true, collapsed: !!result.collapsed, viaNetwork: genAiNetworkSeen, where: result.where };
  }

  // --- Signal 3: MutationObserver  (catch delayed render) ---
  const observed = await page.evaluate(() => new Promise((resolve) => {
    const found = () => resolve(true);
    let timer = setTimeout(() => resolve(false), 3500);
    const rx = [/ai overview/i, /overview from ai/i, /generated by ai/i];
    const observer = new MutationObserver(() => {
      const txt = document.body.innerText || '';
      if (rx.some(r => r.test(txt))) {
        clearTimeout(timer); observer.disconnect(); resolve(true);
      }
    });
    observer.observe(document.body, { childList: true, subtree: true });
  }));

  if (observed) {
    result = await domProbe();
    page.off('request', netListener);
    return { aiOverview: true, collapsed: !!result.collapsed, viaNetwork: genAiNetworkSeen, where: result.where || 'observer' };
  }

  // --- Optional: trigger the collapsed module (if present) ---
  // Try to expand if we can see a “Generate/Show more” button
  const expandBtn = page.locator('button:has-text("Show more"), button:has-text("Generate"), div[role="button"]:has-text("Show more")').first();
  if (await expandBtn.isVisible()) {
    await expandBtn.click({ delay: 50 });
    await page.waitForTimeout(1500);
    result = await domProbe();
    page.off('request', netListener);
    if (result.present) return { aiOverview: true, collapsed: false, viaNetwork: genAiNetworkSeen, where: result.where || 'expanded' };
  }

  page.off('request', netListener);
  return { aiOverview: false, collapsed: false, viaNetwork: genAiNetworkSeen, where: 'none' };
}
